#!/usr/bin/env perl

use strict;
use warnings;

use FXC::Converter;

my $converter = FXC::Converter->new({
  cache => "$ENV{HOME}/.fx-converter-cache.xml",
  on_message => sub {
    my ($msg, $exit) = @_;

    die "$msg\n" if($exit);
    print "$msg\n";
  },
});


sub parse_args {
  splice(@_, 2, 1) if(scalar(@_) == 4);

  die "Missing or malformatted amount\n" unless($_[0] && $_[0] =~ /^\d+(?:\.\d+)?$/);
  die "From symbol missing\n" unless($_[1]);
  die "To symbol missing\n" unless($_[2]);

  for my $i (1..2) {
    $_[$i] = uc($_[$i]) ;
    die "$_[$i] is unsupported or malformatted\n"
      unless($converter->has_symbol($_[$i]));
  }

  return @_;
}

my ($amount, $from_symbol, $to_symbol) = parse_args(@ARGV);

printf("%.02f\n", $converter->convert($amount, $from_symbol, $to_symbol));
